import time
import datetime
import sys
import numpy
import pyfits
import getpass
import warnings
import os

import artemishsc
from artemishsc import *

DEFAULT_DEVICE = -1
FITS_FILENAME = 'titan.fits'

def formatted_file_size_kilobytes(file):
    size_in_bytes = os.path.getsize(FITS_FILENAME)
    size_in_kilobytes = int(size_in_bytes / 1024)
    formatted_string = format(size_in_kilobytes, ',d') + 'KB'
    return formatted_string

try:
    dll_loaded = ArtemisLoadDLL('shared\ArtemisHSC.dll')
    print 'DLL loaded: ', dll_loaded
    if not dll_loaded:
        sys.exit(1)

    print 'Artemis API Version: ', ArtemisAPIVersion()
    print

    titan = ArtemisConnect(DEFAULT_DEVICE)

    try:
        connected = ArtemisIsConnected(titan)
        print 'Connected: ', connected

        if not connected:
            sys.exit(1)

        print 'Starting exposure'

        ArtemisStartExposure(titan, 1)
        while not ArtemisImageReady(titan):
            time.sleep(0.5)
   
        now = datetime.date.today()
        observation_timestamp = datetime.datetime.fromtimestamp(time.time()).isoformat()
        print 'Exposure complete'

        percent_done = ArtemisDownloadPercent(titan)
        print 'Download % completed: ', percent_done
        while percent_done < 100:
            print 'Download % completed: ', percent_done
            percent_done = ArtemisDownloadPercent(titan)

        i, x, y, w, h, bin_x, bin_y = ArtemisGetImageData(titan)
        print '[%d] Fetched imaged data - x=%d/y=%d w=%d/h=%d bin: x=%d/y=%d' % (i, x, y, w, h, bin_x, bin_y)

        image_buffer = ArtemisGetImageArray_pythonList(titan)
        print 'Image Buffer stdev: ', numpy.nanstd(image_buffer)
        print 'Image Buffer mean:', numpy.mean(image_buffer)

        user = getpass.getuser()

        print
        print 'Creating FITS file'

        header_primary = pyfits.Header()
        header_primary.add_comment('Generated by artemishsc')
        header_primary['SIMPLE'] = 'T'
        header_primary['AUTHOR'] = user
        header_primary['BITPIX'] = 16
        header_primary['DATE'] = observation_timestamp
        header_primary['DATE-OBS'] = observation_timestamp
        header_primary['TELESCOP'] = 'N/A'
        header_primary['INSTRUME'] = 'Atik Titan'
        header_primary['NAXIS'] = 2
        header_primary['NAXIS1'] = w
        header_primary['NAXIS2'] = h
        header_primary['OBJECT'] = 'N/A'
        header_primary['OBSERVER'] = user
        header_primary['ORIGIN'] = 'Las Cumbres Observatory'
        hdu_primary = pyfits.PrimaryHDU(header=header_primary)

        header_table = pyfits.Header()
        header_table['TFORM1'] = 'BINTABLE'
        header_table['TTYPE1'] = 'ccd_output'
        hdu_table = pyfits.TableHDU(header=header_table)


        header_bintable = pyfits.Header()
        header_bintable['TDIM1'] = '2,%d,%d' % (w, h)
        hdu_bintable = pyfits.BinTableHDU(data=image_buffer, header=header_bintable, name='titan', uint=True)

        hdu_list = pyfits.HDUList(hdus=[hdu_primary, hdu_table, hdu_bintable])

        print
        print 'FITS Headers:'
        for key, value in header_primary.iteritems():
            print '\t%-8s: %s' % (key, value)
        print

        with warnings.catch_warnings([UserWarning]):
            hdu_list.writeto(FITS_FILENAME, clobber=True, output_verify='fix', checksum=True)

        print 'FITS file size: ', formatted_file_size_kilobytes(FITS_FILENAME)
        print

        hdu_list = pyfits.open(FITS_FILENAME)
        try:
            hdu_list.info()
            print
        finally: 
            hdu_list.close()

    except Exception as e:
        raise e

    finally:
        print 'Disconncting from camera'
        ArtemisDisconnect(titan)

except Exception as e:
    print e, '\n'

finally:
    print 'Unloading driver DLL'
    ArtemisUnLoadDLL()
    print
    print 'Observation completed.'
