import time
import datetime
import sys
import getpass
import warnings
import os

import numpy
import pyfits

from artemishsc import *


EXPOSURE_TIME = 1.0
DEFAULT_DEVICE = -1
FITS_FILENAME = 'titan.fits'
dtype_pixel = numpy.uint16

def formatted_file_size_kilobytes(input_file):
    size_in_bytes = os.path.getsize(input_file)
    size_in_kilobytes = int(size_in_bytes / 1024)
    formatted_string = format(size_in_kilobytes, ',d') + 'KB'
    return formatted_string


try:
    dll_loaded = ArtemisLoadDLL('shared\ArtemisHSC.dll')
    print 'DLL loaded: ', dll_loaded
    if not dll_loaded:
        sys.exit(1)

    print 'Artemis API Version: ', ArtemisAPIVersion()
    print

    titan = ArtemisConnect(DEFAULT_DEVICE)

    try:
        connected = ArtemisIsConnected(titan)
        print 'Connected: ', connected

        if not connected:
            sys.exit(1)

        print 'Starting exposure'

        ArtemisStartExposure(titan, EXPOSURE_TIME)

        while not ArtemisImageReady(titan):
            time.sleep(0.5)

        now = datetime.date.today()
        observation_timestamp = datetime.datetime.fromtimestamp(time.time()).isoformat()
        print 'Exposure complete'

        percent_done = ArtemisDownloadPercent(titan)
        print 'Download % completed: ', percent_done
        while percent_done < 100:
            print 'Download % completed: ', percent_done
            percent_done = ArtemisDownloadPercent(titan)

        i, x, y, w, h, bin_x, bin_y = ArtemisGetImageData(titan)
        print '[%d] Fetched imaged data - x=%d/y=%d w=%d/h=%d bin: x=%d/y=%d' % (i, x, y, w, h, bin_x, bin_y)

        image_buffer = numpy.asarray(a=ArtemisGetImageArray_pythonList(titan), order='C')
        print 'Image Buffer stdev: ', numpy.nanstd(image_buffer)
        print 'Image Buffer mean:', numpy.mean(image_buffer)
        image_array = numpy.rot90(numpy.asarray(numpy.reshape(image_buffer, (w, h)), dtype=dtype_pixel, order='C'))

        print
        print 'Creating FITS file'

        user = getpass.getuser()

        header_primary = pyfits.Header()
        header_primary['SIMPLE'] = 'T'
        header_primary['BITPIX'] = 16
        header_primary['BYTEORDR'] = 'BIG_ENDIAN'
        header_primary['NAXIS'] = 2
        header_primary['NAXIS1'] = h
        header_primary['NAXIS2'] = w
        header_primary['EXTEND'] = 'T'
        header_primary['DATATYPE'] = 'INTEGER*2'
        header_primary['DATATYPE'] = 'INTEGER*2'
        header_primary['TELESCOP'] = 'N/A'
        header_primary['INSTRUME'] = 'Atik Titan'
        header_primary['OBJECT'] = 'N/A'
        header_primary['OBJECT2'] = '_'
        header_primary['CATEGORY'] = 'TITAN'
        header_primary['IMAGE'] = 'EXAMPLE'
        header_primary['ORIGIN'] = 'Las Cumbres Observatory'
        header_primary['FEXPTIME'] = int(EXPOSURE_TIME * 1000)
        header_primary['DATE'] = observation_timestamp
        header_primary['DATE-OBS'] = observation_timestamp
        header_primary['BSCALE'] = 1
        header_primary['BUNIT'] = 'DN'
        header_primary['BZERO'] = 0.0
        header_primary['EXPTIME'] = int(EXPOSURE_TIME * 1000)
        header_primary['CRPIX1'] = 100.0
        header_primary['CRPIX2'] = 100.0
        header_primary['CRVAL1'] = 0.0
        header_primary['CRVAL2'] = 0.0
        header_primary['CRTYPE1'] = 'RA--TAN'
        header_primary['CRTYPE2'] = 'DEC--TAN'
        header_primary['PSCALE1'] = 1.0
        header_primary['PSCALE2'] = 1.0
        header_primary['ASTRPROG'] = __file__
        header_primary['ASTRVER'] = '1.0'
        header_primary['AUTHOR'] = user
        header_primary['OBSERVER'] = user

        header_primary.add_comment(format('Generated by %s' % ( __file__)))
        header_primary.add_history('Atik Titan Exposure')

        hdu_primary = pyfits.PrimaryHDU(header=header_primary, data=image_array, uint=True)

        print
        print 'FITS Headers:'
        for key, value in header_primary.iteritems():
            print '\t%-8s: %s' % (key, value)
        print

        with warnings.catch_warnings([UserWarning]):
            hdu_primary.writeto(name=FITS_FILENAME, clobber=True, output_verify='fix', checksum=False)

        print 'FITS file size: ', formatted_file_size_kilobytes(FITS_FILENAME)
        print

        hdu_list = pyfits.open(FITS_FILENAME)
        try:
            hdu_list.info()
            print
        finally:
            hdu_list.close()

    finally:
        print 'Disconnecting from camera'
        ArtemisDisconnect(titan)

finally:
    print 'Unloading driver DLL'
    ArtemisUnLoadDLL()
    print
    print 'Observation completed.'
